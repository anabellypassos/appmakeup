import 'package:flutter/material.dart';
import '../store/product_store.dart';

class InfoProduto extends StatelessWidget {
  final Autogenerated product;

  const InfoProduto({super.key, required this.product});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(product.name ?? 'Detalhes do Produto'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            // Imagem do produto
            if (product.imageLink != null)
              Image.network(
                product.imageLink!,
                height: 450,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return const Center(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.error,
                          size: 50.0,
                          color: Colors.red,
                        ),
                        SizedBox(height: 8.0),
                        Text(
                          'Imagem não disponível',
                          style: TextStyle(
                            fontSize: 16.0,
                            color: Colors.red,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            const SizedBox(height: 16.0),

            // Nome do produto
            Text(
              product.name ?? 'Nome não disponível',
              style: const TextStyle(
                fontSize: 24.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8.0),

            // Marca do produto
            Text(
              'Marca: ${product.brand ?? 'Marca não disponível'}',
              style: const TextStyle(
                fontSize: 16.0,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 8.0),

            // Preço do produto
            Text(
              product.price != null
                  ? 'Preço: \$${product.price}'
                  : 'Preço não disponível',
              style: const TextStyle(
                fontSize: 18.0,
                color: Colors.black,
              ),
            ),
            const SizedBox(height: 16.0),

            // Descrição do produto
            Text(
              product.description ?? 'Descrição não disponível',
              style: const TextStyle(fontSize: 16.0),
            ),
            const SizedBox(height: 16.0),

            // Rating do produto
            if (product.rating != null)
              Row(
                children: [
                  const Icon(Icons.star, color: Colors.amber),
                  const SizedBox(width: 4.0),
                  Text('${product.rating}'),
                ],
              ),
            const SizedBox(height: 16.0),

            // Tipo do produto
            Text(
              'Tipo: ${product.productType ?? 'Tipo não disponível'}',
              style: const TextStyle(fontSize: 16.0),
            ),
            const SizedBox(height: 16.0),

            // Categoria do produto
            Text(
              'Categoria: ${product.category ?? 'Categoria não disponível'}',
              style: const TextStyle(fontSize: 16.0),
            ),
            const SizedBox(height: 16.0),

            // Cores disponíveis
            if (product.productColors != null &&
                product.productColors!.isNotEmpty)
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Cores disponíveis:',
                    style: TextStyle(
                      fontSize: 16.0,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8.0),
                  Wrap(
                    spacing: 8.0,
                    children: product.productColors!.map((color) {
                      return Chip(
                        backgroundColor: color.hexValue != null
                            ? Color(int.parse(color.hexValue!
                                .replaceFirst('#', '0xff')))
                            : Colors.grey,
                        label: Text(color.colourName ?? 'Cor não disponível'),
                      );
                    }).toList(),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }
}
